{"version":3,"file":"static/js/428.6b2aee13.chunk.js","mappings":"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","sources":["../node_modules/@emailjs/browser/es/models/EmailJSResponseStatus.js","../node_modules/@emailjs/browser/es/utils/createWebStorage/createWebStorage.js","../node_modules/@emailjs/browser/es/store/store.js","../node_modules/@emailjs/browser/es/utils/buildOptions/buildOptions.js","../node_modules/@emailjs/browser/es/api/sendPost.js","../node_modules/@emailjs/browser/es/utils/validateParams/validateParams.js","../node_modules/@emailjs/browser/es/utils/isHeadless/isHeadless.js","../node_modules/@emailjs/browser/es/errors/headlessError/headlessError.js","../node_modules/@emailjs/browser/es/utils/isBlockedValueInParams/isBlockedValueInParams.js","../node_modules/@emailjs/browser/es/utils/validateBlockListParams/validateBlockListParams.js","../node_modules/@emailjs/browser/es/errors/blockedEmailError/blockedEmailError.js","../node_modules/@emailjs/browser/es/utils/isLimitRateHit/isLimitRateHit.js","../node_modules/@emailjs/browser/es/utils/validateLimitRateParams/validateLimitRateParams.js","../node_modules/@emailjs/browser/es/errors/limitRateError/limitRateError.js","../node_modules/@emailjs/browser/es/index.js","../node_modules/@emailjs/browser/es/methods/init/init.js","../node_modules/@emailjs/browser/es/methods/sendForm/sendForm.js","../node_modules/@emailjs/browser/es/utils/validateForm/validateForm.js","components/Contact/Contact.js"],"sourcesContent":["export class EmailJSResponseStatus {\n    constructor(_status = 0, _text = 'Network Error') {\n        this.status = _status;\n        this.text = _text;\n    }\n}\n","export const createWebStorage = () => {\n    if (typeof localStorage === 'undefined')\n        return;\n    return {\n        get: (key) => Promise.resolve(localStorage.getItem(key)),\n        set: (key, value) => Promise.resolve(localStorage.setItem(key, value)),\n        remove: (key) => Promise.resolve(localStorage.removeItem(key)),\n    };\n};\n","import { createWebStorage } from '../utils/createWebStorage/createWebStorage';\nexport const store = {\n    origin: 'https://api.emailjs.com',\n    blockHeadless: false,\n    storageProvider: createWebStorage(),\n};\n","export const buildOptions = (options) => {\n    if (!options)\n        return {};\n    // support compatibility with SDK v3\n    if (typeof options === 'string') {\n        return {\n            publicKey: options,\n        };\n    }\n    // eslint-disable-next-line @typescript-eslint/no-base-to-string\n    if (options.toString() === '[object Object]') {\n        return options;\n    }\n    return {};\n};\n","import { EmailJSResponseStatus } from '../models/EmailJSResponseStatus';\nimport { store } from '../store/store';\nexport const sendPost = async (url, data, headers = {}) => {\n    const response = await fetch(store.origin + url, {\n        method: 'POST',\n        headers,\n        body: data,\n    });\n    const message = await response.text();\n    const responseStatus = new EmailJSResponseStatus(response.status, message);\n    if (response.ok) {\n        return responseStatus;\n    }\n    throw responseStatus;\n};\n","export const validateParams = (publicKey, serviceID, templateID) => {\n    if (!publicKey || typeof publicKey !== 'string') {\n        throw 'The public key is required. Visit https://dashboard.emailjs.com/admin/account';\n    }\n    if (!serviceID || typeof serviceID !== 'string') {\n        throw 'The service ID is required. Visit https://dashboard.emailjs.com/admin';\n    }\n    if (!templateID || typeof templateID !== 'string') {\n        throw 'The template ID is required. Visit https://dashboard.emailjs.com/admin/templates';\n    }\n};\n","export const isHeadless = (navigator) => {\n    return navigator.webdriver || !navigator.languages || navigator.languages.length === 0;\n};\n","import { EmailJSResponseStatus } from '../../models/EmailJSResponseStatus';\nexport const headlessError = () => {\n    return new EmailJSResponseStatus(451, 'Unavailable For Headless Browser');\n};\n","import { validateBlockListParams } from '../validateBlockListParams/validateBlockListParams';\nconst isBlockListDisabled = (options) => {\n    return !options.list?.length || !options.watchVariable;\n};\nconst getValue = (data, name) => {\n    return data instanceof FormData ? data.get(name) : data[name];\n};\nexport const isBlockedValueInParams = (options, params) => {\n    if (isBlockListDisabled(options))\n        return false;\n    validateBlockListParams(options.list, options.watchVariable);\n    const value = getValue(params, options.watchVariable);\n    if (typeof value !== 'string')\n        return false;\n    return options.list.includes(value);\n};\n","export const validateBlockListParams = (list, watchVariable) => {\n    if (!Array.isArray(list)) {\n        throw 'The BlockList list has to be an array';\n    }\n    if (typeof watchVariable !== 'string') {\n        throw 'The BlockList watchVariable has to be a string';\n    }\n};\n","import { EmailJSResponseStatus } from '../../models/EmailJSResponseStatus';\nexport const blockedEmailError = () => {\n    return new EmailJSResponseStatus(403, 'Forbidden');\n};\n","import { validateLimitRateParams } from '../validateLimitRateParams/validateLimitRateParams';\nconst getLeftTime = async (id, throttle, storage) => {\n    const lastTime = Number((await storage.get(id)) || 0);\n    return throttle - Date.now() + lastTime;\n};\nexport const isLimitRateHit = async (defaultID, options, storage) => {\n    if (!options.throttle || !storage) {\n        return false;\n    }\n    validateLimitRateParams(options.throttle, options.id);\n    const id = options.id || defaultID;\n    const leftTime = await getLeftTime(id, options.throttle, storage);\n    if (leftTime > 0) {\n        return true;\n    }\n    await storage.set(id, Date.now().toString());\n    return false;\n};\n","export const validateLimitRateParams = (throttle, id) => {\n    if (typeof throttle !== 'number' || throttle < 0) {\n        throw 'The LimitRate throttle has to be a positive number';\n    }\n    if (id && typeof id !== 'string') {\n        throw 'The LimitRate ID has to be a non-empty string';\n    }\n};\n","import { EmailJSResponseStatus } from '../../models/EmailJSResponseStatus';\nexport const limitRateError = () => {\n    return new EmailJSResponseStatus(429, 'Too Many Requests');\n};\n","import { EmailJSResponseStatus } from './models/EmailJSResponseStatus';\nimport { init } from './methods/init/init';\nimport { send } from './methods/send/send';\nimport { sendForm } from './methods/sendForm/sendForm';\nexport { init, send, sendForm, EmailJSResponseStatus };\nexport default {\n    init,\n    send,\n    sendForm,\n    EmailJSResponseStatus,\n};\n","import { store } from '../../store/store';\nimport { buildOptions } from '../../utils/buildOptions/buildOptions';\n/**\n * EmailJS global SDK config\n * @param {object} options - the EmailJS global SDK config options\n * @param {string} origin - the non-default EmailJS origin\n */\nexport const init = (options, origin = 'https://api.emailjs.com') => {\n    if (!options)\n        return;\n    const opts = buildOptions(options);\n    store.publicKey = opts.publicKey;\n    store.blockHeadless = opts.blockHeadless;\n    store.storageProvider = opts.storageProvider;\n    store.blockList = opts.blockList;\n    store.limitRate = opts.limitRate;\n    store.origin = opts.origin || origin;\n};\n","import { store } from '../../store/store';\nimport { sendPost } from '../../api/sendPost';\nimport { buildOptions } from '../../utils/buildOptions/buildOptions';\nimport { validateForm } from '../../utils/validateForm/validateForm';\nimport { validateParams } from '../../utils/validateParams/validateParams';\nimport { isHeadless } from '../../utils/isHeadless/isHeadless';\nimport { headlessError } from '../../errors/headlessError/headlessError';\nimport { isBlockedValueInParams } from '../../utils/isBlockedValueInParams/isBlockedValueInParams';\nimport { blockedEmailError } from '../../errors/blockedEmailError/blockedEmailError';\nimport { isLimitRateHit } from '../../utils/isLimitRateHit/isLimitRateHit';\nimport { limitRateError } from '../../errors/limitRateError/limitRateError';\nconst findHTMLForm = (form) => {\n    return typeof form === 'string' ? document.querySelector(form) : form;\n};\n/**\n * Send a form the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {string | HTMLFormElement} form - the form element or selector\n * @param {object} options - the EmailJS SDK config options\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const sendForm = async (serviceID, templateID, form, options) => {\n    const opts = buildOptions(options);\n    const publicKey = opts.publicKey || store.publicKey;\n    const blockHeadless = opts.blockHeadless || store.blockHeadless;\n    const storageProvider = store.storageProvider || opts.storageProvider;\n    const blockList = { ...store.blockList, ...opts.blockList };\n    const limitRate = { ...store.limitRate, ...opts.limitRate };\n    if (blockHeadless && isHeadless(navigator)) {\n        return Promise.reject(headlessError());\n    }\n    const currentForm = findHTMLForm(form);\n    validateParams(publicKey, serviceID, templateID);\n    validateForm(currentForm);\n    const formData = new FormData(currentForm);\n    if (isBlockedValueInParams(blockList, formData)) {\n        return Promise.reject(blockedEmailError());\n    }\n    if (await isLimitRateHit(location.pathname, limitRate, storageProvider)) {\n        return Promise.reject(limitRateError());\n    }\n    formData.append('lib_version', '4.4.1');\n    formData.append('service_id', serviceID);\n    formData.append('template_id', templateID);\n    formData.append('user_id', publicKey);\n    return sendPost('/api/v1.0/email/send-form', formData);\n};\n","export const validateForm = (form) => {\n    if (!form || form.nodeName !== 'FORM') {\n        throw 'The 3rd parameter is expected to be the HTML form element or the style selector of the form';\n    }\n};\n","import { useRef, useState, useEffect } from 'react';\r\nimport emailjs from '@emailjs/browser';\r\nimport './Contact.css';\r\n\r\nfunction Contact() {\r\n  const form = useRef();\r\n  const [messageSent, setMessageSent] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [formData, setFormData] = useState({\r\n    from_name: '',\r\n    from_email: '',\r\n    message: ''\r\n  });\r\n\r\n  useEffect(() => {\r\n    emailjs.init('dHZWYZnfckAyDh553');\r\n  }, []);\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      [name]: value\r\n    }));\r\n  };\r\n\r\n  const sendEmail = (e) => {\r\n    e.preventDefault();\r\n    setIsLoading(true);\r\n    setError(null);\r\n\r\n    emailjs\r\n      .sendForm('service_i8541tp', 'template_rd792tr', form.current)\r\n      .then(\r\n        (result) => {\r\n          console.log('Message sent:', result.text);\r\n          setMessageSent(true);\r\n          setError(null);\r\n          setFormData({\r\n            from_name: '',\r\n            from_email: '',\r\n            message: ''\r\n          });\r\n          setIsLoading(false);\r\n          \r\n          // Reset message sent status after 5 seconds\r\n          setTimeout(() => {\r\n            setMessageSent(false);\r\n          }, 5000);\r\n        },\r\n        (err) => {\r\n          console.error('Error sending message:', err.text);\r\n          setError('Failed to send message. Please try again later or contact me directly at skmdtousif172@gmail.com');\r\n          setMessageSent(false);\r\n          setIsLoading(false);\r\n        }\r\n      );\r\n  };\r\n\r\n  const contactMethods = [\r\n    {\r\n      icon: '📧',\r\n      title: 'Email',\r\n      value: 'skmdtousif172@gmail.com',\r\n      link: 'mailto:skmdtousif172@gmail.com'\r\n    },\r\n    {\r\n      icon: '📱',\r\n      title: 'Phone',\r\n      value: '+91-7908319931',\r\n      link: 'tel:+917908319931'\r\n    },\r\n    {\r\n      icon: '💼',\r\n      title: 'LinkedIn',\r\n      value: 'Sk Md Tousif',\r\n      link: 'https://www.linkedin.com/in/sk-md-tousif-2a1b30257/'\r\n    },\r\n    {\r\n      icon: '⚡',\r\n      title: 'Codeforces',\r\n      value: 'sm_tousif21',\r\n      link: 'https://codeforces.com/profile/sm_tousif21'\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <section id=\"contact\" className=\"contact\">\r\n      <div className=\"section-header\">\r\n        <h2>Get In Touch</h2>\r\n        <p>I'm always open to discussing new opportunities and interesting projects</p>\r\n      </div>\r\n\r\n      <div className=\"contact-container\">\r\n        <div className=\"contact-info\">\r\n          <h3>Let's Connect</h3>\r\n          <p>\r\n            I'm currently looking for new opportunities in software development and \r\n            competitive programming. Whether you have a question or just want to say hi, \r\n            I'll try my best to get back to you!\r\n          </p>\r\n\r\n          <div className=\"contact-methods\">\r\n            {contactMethods.map((method, index) => (\r\n              <a\r\n                key={index}\r\n                href={method.link}\r\n                target={method.link.startsWith('http') ? '_blank' : '_self'}\r\n                rel={method.link.startsWith('http') ? 'noopener noreferrer' : ''}\r\n                className=\"contact-method\"\r\n              >\r\n                <span className=\"method-icon\">{method.icon}</span>\r\n                <div className=\"method-info\">\r\n                  <span className=\"method-title\">{method.title}</span>\r\n                  <span className=\"method-value\">{method.value}</span>\r\n                </div>\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"16\" height=\"16\">\r\n                  <path fill=\"none\" d=\"M0 0h24v24H0z\"/>\r\n                  <path d=\"M16.004 9.414l-8.607 8.607-1.414-1.414L14.589 8H7.004V6h11v11h-2V9.414z\" fill=\"currentColor\"/>\r\n                </svg>\r\n              </a>\r\n            ))}\r\n          </div>\r\n\r\n          <div className=\"contact-availability\">\r\n            <div className=\"availability-status\">\r\n              <div className=\"status-indicator\"></div>\r\n              <span>Available for new opportunities</span>\r\n            </div>\r\n            <p>Response time: Usually within 24 hours</p>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"contact-form-container\">\r\n          <form ref={form} onSubmit={sendEmail} className=\"contact-form\">\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"from_name\" className=\"form-label\">\r\n                Name *\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"from_name\"\r\n                name=\"from_name\"\r\n                value={formData.from_name}\r\n                onChange={handleInputChange}\r\n                required\r\n                className=\"form-input\"\r\n                placeholder=\"Your full name\"\r\n              />\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"from_email\" className=\"form-label\">\r\n                Email *\r\n              </label>\r\n              <input\r\n                type=\"email\"\r\n                id=\"from_email\"\r\n                name=\"from_email\"\r\n                value={formData.from_email}\r\n                onChange={handleInputChange}\r\n                required\r\n                className=\"form-input\"\r\n                placeholder=\"your.email@example.com\"\r\n              />\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"message\" className=\"form-label\">\r\n                Message *\r\n              </label>\r\n              <textarea\r\n                id=\"message\"\r\n                name=\"message\"\r\n                value={formData.message}\r\n                onChange={handleInputChange}\r\n                required\r\n                rows=\"5\"\r\n                className=\"form-textarea\"\r\n                placeholder=\"Tell me about your project or just say hello...\"\r\n              ></textarea>\r\n            </div>\r\n\r\n            <button \r\n              type=\"submit\" \r\n              className={`submit-btn ${isLoading ? 'loading' : ''}`}\r\n              disabled={isLoading}\r\n            >\r\n              {isLoading ? (\r\n                <>\r\n                  <div className=\"spinner\"></div>\r\n                  Sending...\r\n                </>\r\n              ) : (\r\n                <>\r\n                  Send Message\r\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"20\" height=\"20\">\r\n                    <path fill=\"none\" d=\"M0 0h24v24H0z\"/>\r\n                    <path d=\"M3 13h6v-2H3V1.846a.5.5 0 0 1 .741-.438l18.462 10.154a.5.5 0 0 1 0 .876L3.741 22.592A.5.5 0 0 1 3 22.154V13z\" fill=\"currentColor\"/>\r\n                  </svg>\r\n                </>\r\n              )}\r\n            </button>\r\n          </form>\r\n\r\n          {messageSent && (\r\n            <div className=\"alert success\">\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"20\" height=\"20\">\r\n                <path fill=\"none\" d=\"M0 0h24v24H0z\"/>\r\n                <path d=\"M12 22C6.477 22 2 17.523 2 12S6.477 2 12 2s10 4.477 10 10-4.477 10-10 10zm-1-11v6h2v-6h-2zm0-4v2h2V7h-2z\" fill=\"currentColor\"/>\r\n              </svg>\r\n              Message sent successfully! I'll get back to you within 24 hours.\r\n            </div>\r\n          )}\r\n\r\n          {error && (\r\n            <div className=\"alert error\">\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"20\" height=\"20\">\r\n                <path fill=\"none\" d=\"M0 0h24v24H0z\"/>\r\n                <path d=\"M12 22C6.477 22 2 17.523 2 12S6.477 2 12 2s10 4.477 10 10-4.477 10-10 10zm-1-11v6h2v-6h-2zm0-4v2h2V7h-2z\" fill=\"currentColor\"/>\r\n              </svg>\r\n              {error}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default Contact;"],"names":["EmailJSResponseStatus","constructor","_status","arguments","length","undefined","_text","this","status","text","store","origin","blockHeadless","storageProvider","createWebStorage","localStorage","get","key","Promise","resolve","getItem","set","value","setItem","remove","removeItem","buildOptions","options","publicKey","toString","sendPost","async","url","data","headers","response","fetch","method","body","message","responseStatus","ok","validateParams","serviceID","templateID","isHeadless","navigator","webdriver","languages","headlessError","isBlockedValueInParams","params","_options$list","list","watchVariable","isBlockListDisabled","validateBlockListParams","Array","isArray","name","FormData","getValue","includes","blockedEmailError","isLimitRateHit","defaultID","storage","throttle","validateLimitRateParams","id","leftTime","lastTime","Number","Date","now","getLeftTime","limitRateError","opts","blockList","limitRate","form","_objectSpread","reject","currentForm","document","querySelector","findHTMLForm","nodeName","validateForm","formData","location","pathname","append","useRef","messageSent","setMessageSent","useState","error","setError","isLoading","setIsLoading","setFormData","from_name","from_email","useEffect","emailjs","handleInputChange","e","target","prev","_jsxs","className","children","_jsx","icon","title","link","map","index","href","startsWith","rel","xmlns","viewBox","width","height","fill","d","ref","onSubmit","preventDefault","current","then","result","console","log","setTimeout","err","htmlFor","type","onChange","required","placeholder","rows","concat","disabled","_Fragment"],"sourceRoot":""}